@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│                             ASM Notes                                       │
@│ GCC Assembler                                                               │
@└─────────────────────────────────────────────────────────────────────────────┘  

@Bit=1, Nibble = 4bits, Byte = 8bits, Halfword = 16bits, Word = 32bits, Doubleword = 64bits*/

@ Almost every ARM instruction can be executed conditionally on the state of the ALU status flags in the Current Program Status Register (CPSR). Refer to Table 2.1 for a list of the suffixes to add to instructions to make them conditional.
@ Table 2.1 http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/ch02s05s02.html
@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Table 4.2./2.1 ARM condition codes                                      │
@├─────────────────────────────────────────────────────────────────────────┤
@│ Suffix  Flags                           Meaning                         │
@│ EQ      Z set                           Equal                           │
@│ NE      Z clear                         Not equal                       │
@│ CS/HS   C set                           Higher or same (unsigned >= )   │
@│ CC/LO   C clear                         Lower (unsigned < )             │
@│ MI      N set                           Negative. Set when 31bit is set │ 31 bit of destination register is set
@│ PL      N clear                         Positive or zero                │
@│ VS      V set                           Overflow                        │
@│ VC      V clear                         No overflow                     │
@│ HI      C set and Z clear               Higher (unsigned > )            │ Ex: cmp r10, r5; movhi r10, #0; if r10 > r5 then r10 = 0
@│ LS      C clear or Z set                Lower or same (unsigned <= )    │
@│ GE      N and V the same                Signed >=                       │
@│ LT      N and V different               Signed <                        │
@│ GT      Z clear, and N and V the same   Signed >                        │
@│ LE      Z set, or N and V different     Signed <=                       │
@│ AL      Any Always                      (usually omitted)               │
@│ NV      Never                                                           │
@└─────────────────────────────────────────────────────────────────────────┘

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│      Twos complemen            │
@└────────────────────────────────┘
@ To represent a negative number in binary use twos complement. To represent a -3
@ in binary first take the binary value for 3
@ 1. 0000 0011 (3b)
@ 2. 1111 1100 Invert the bits (Ones complement)
@ 3. 0000 0001 Add one to it.
@    1111 1101 You get twos complement -3


@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ARM User Mode Registers Bank    │
@└────────────────────────────────┘
@┍━━━━━━━━━━━━━━━━━━━┑
@├───────────────────┤
@│ R0 │ Available    │
@├───────────────────┤
@│ R1 │ Available    │
@├───────────────────┤
@│ R2 │ Available    │
@├───────────────────┤
@│ R3 │ Available    │
@├───────────────────┤
@│ R4 │ Available    │ store on stack for func calls
@├───────────────────┤
@│ R5 │ Available    │
@├───────────────────┤
@│ R6 │ Available    │
@├───────────────────┤
@│ R7 │ Available    │
@├───────────────────┤
@│ R8 │ Available    │
@├───────────────────┤
@│ R9 │ Available    │
@├───────────────────┤
@│ R10│ Available    │
@├───────────────────┤
@│ R11│ Available    │ fp
@├───────────────────┤
@│ R12│ Available    │ ip
@├───────────────────┤
@│ R13│ stack pntr   │ sp
@├───────────────────┤
@│ R14│ Link registe │ lr
@├───────────────────┤
@│ R15│ Program Cntr │ pc
@├───────────────────┤
@│ Current program   │ cpsr
@│ Status register   │
@└───────────────────┘

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│Status Register Configuration   │
@└────────────────────────────────┘
 ┌─────────────────────────────────────┐
@│31│30│29│28│27..24..8│7│6│5│4│3│2│1│0│
@├─────────────────────────────────────┤
@│N │Z │C │V │   │ J │ │I│F│T│ Mode    │
@└─────────────────────────────────────┘
@ N = Negative flag
@ Z = Zero flag
@ C = Carry flag
@ V = Overflow flag
@ I = Interupt disable bits
@ F = Interupt disable bits
@ T = Processor states 
@ J = Jazelle State. Allow running of a Java Virtual Machine
@ Mode = processor mode. Usually user mode

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ARM Instructions                │
@└────────────────────────────────┘
ldr r1, [r5,#1]   @ load register. load contents at location in r5 +1 byte
ldr r1, [r5, #-1]
ldr r1, [r5, -r1]
ldr r1, [r5, r2, lsr #2] @ r2 is shifted by 4 and added to the address in r5
                         @ memory is addressed in bytes. A word is 4 bytes, and register holds one word. So if you want to move to the next word in memory you have to shift your address by #2. Or this moves  you 4 bytes. Each shift is 2 bytes. In this case 2 bytes * 2 shifts = 4 bytes or one word. this  moves you on a word boundry
ldr r1,[r5]      @ load contents at location in r5 into r1

mvn r1, r2       @ Performs a bitwise logical NOT on operatnd 2 (r2) and places the result into op1 (r1)

str r1,[r6]      @ store to memory. Store content r1 in location r6. 
                 @[rX] is called an addressing mode. ARM instructions have several addressing modes.
pc               @ Program counter nmeomonic. = r15
beq              @ Branch if EQual. Jump to some label if Z flag = 1
bne              @ Branch if Not Equal. Jump to some label if Z flag = 0
                 @ mnemonic that allow us to test the Status Register Flag Z
cmp <op1>,<op2>  @ CoMPare. Performs a notational subtraction. op1 - op2. The physical result of the subtraction is ignored, but it updates the Status Register flags according to the outcome of the subtraction, which will be postive, zero, or negative (there can never be a carry). If the result of the subtraction was 0 Zero flag would be set. op1 is always a register. op2 can be a register or a specific or a immediate value.
                 @ Example: 
                    cmp r0, r1
                    beq zeroflagset  @Branch to the label 'zeroflagset'.
cmn <op1>,<op2>  @ ComPare Negative.
                 @ cmp and cpn are the only instrctions that directly affect the condition of the Status Register. By default, the rest of the ARM instruction set does not update the Status Register.
sub r0,r0,r1     @ subtract r1 from r0 store in r0
rsb r0,r0,r1     @ Reverse subtract. r1 - r0
rsc r0,r0,r1     @ Reverse subtract with carry

@S Suffix. ARM provides a method of allowing an operation such as sub to update the Status Register. This is done by use the Set suffix. All we have to do is append 'S' to the end of the mnemonix we want to use to modify the flags.
@      Example:
       subs r0, r0, r1   @This subtracts the contents of r1 from r0 leaving the result in r0 and at the same time updating the flags in the Status register.
b                @ Branch to a label

smull (<suffix>) <destLo>, <destHi>, <Op1>, <Op2>  @ Signed multiplication using 2 32-bit registers
                                                   @ op1 and op2 are assumed to be in twos complement form
umull (<suffix>) <destLo>, <destHi>, <Op1>, <Op2>  @ Unsigned multiplication using 2 32-bit registers

smlal            @ are the signed and unsigned equivalents of MLA. Op1 and Op2 are multiplied together and the result is added to any value already in destLo and destHi
umala

smlaxy           @ permits multiplication with accumulates using 16bit operands with a 32-bit accumulator.
SMLA<x><y>(<suffix>)<dest>, <Op1>, <Op2>, <Op3> 
                 @ Here <x> and <y> can be either B or T which stand for Bootom and Top, referring to the bottom or top two bytes of Operand1 and Operand2 respectivly. Operand3 contains the value to be added to the result of the multiplicatoin of the bytes identified in Operand1 and Operand2.
                 @ Example:
                 @    SMLABTCC R0, R1, R2, R3
                 @ If the Carry is clear (CC) then the low half-word of R1 will be multiplied with the top half-word of R2. The result will be added to the value in R3 and the result stored in R0.

SMLAWy           @ Here the bottom half-word of R6 is multiplied with the full word in R5 and the value in R7 is added to the result, which is dropped into R0.

SMUAD<X>(<suffic>) <dest>, <Op1>, <Op2>
SMUSD<X>(<suffic>) <dest>, <Op1>, <Op2>           
                 @ work on 16-bit values and offer Signed Multiply with Addition and Singed Multiply with Subtraction, allowing optional exchange of operand halves. 
                 @ If 'X' is included in the instruction then the most and least significant half-words of Operand2 are exchanged. If 'X' is ommitted then no exchange takes place. The instruction then multiplies the contents of the two lower half-words of Op1 and Op2 and aves the result, and then multiplies the contents of the two upper half-words of the operands and saves the results.
                 @ SMUAD (Dual Signed 16-bit Multiply and Addition) the two paritial products are then added and the result placed in the destination register.
                 @ SMUAS (Dual Signed 16-bit Multiply with Subtraction) the second partial product (the upper half-word) is subtracted from the first partial product.
                 @ Example
                 @    SMUADXEQ R5, R6, R7
                 @    SMUDS R5, R7, R9

VLDR             @ For loading floats
                 @ Examples:
                 @    VLDR d2, [r5,#4] @ Laod d2 with a F64 value
                 @    VLDR s1, [r5]    @ Load s1 with F32 value
VSTR
VCMP             @ Vector compare
                 @ There is two version .F32 and .F64
                 @ Example: 
                 @   VCMP .F32 s0, s1  @s0 - s1, set flags
VMRS APSR_nzcv, FPSCR @ Moves the Floating point Status and Control Register (FPSCR) into the Application Status Reigster (APSR - CPSR)
                      @  FPSCR can alse be transfered to an ARM register.
                      @    VMRS r4, FPSCR
                      @ The FPSCR can be loaded with the contents of an ARM register allowing bits to be pre-determined and set:
                      @     VMSR FPSCR, r4  @ Copy r4 into FPSCR
MRS              @ transfers the contents of either CPSR or SPSR into a register.
                 @  Syntax:
                 @      MRS (<suffix>) <Op1>, <CSPR|SPSR>
MSR              @ transfer the contents of a register into either the CSPR or SPSR
                 @  Syntax:
                 @      MSR <CSPR|SPSR|Flags>, <Op1>

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Vector Floating Point          │
@└────────────────────────────────┘
VLDR             @ Vector load register
VCVT             @ Vector convert. Convert from single to double percision or vis versa
    VCVT.F64.F32 @ Convert to F64 from F32. Source and destination registers should match the converting sizes given
VMOCV            @ Vector move

Floating point numbers
Following is a quick recap of what is a floating point number.
A binary floating point number is an approximate representation of a real number with three parts: sign, mantissa and exponent. The sign may be just 0 or 1, meaning 1 a negative number, positive otherwise. The mantissa represents a fractional magnitude. Similarly to 1.2345 we can have a binary 1.01110 where every digit is just a bit. The dot means where the integer part ends and the fractional part starts. Note that there is nothing special in binary fractional numbers: 1.01110 is just 20 + 2-2 + 2-3 + 2-4 = 1.43750(10. Usually numbers are normalized, this means that the mantissa is adjusted so the integer part is always 1, so instead of 0.00110101 we would represent 1.101101 (in fact a floating point may be a denormal if this property does not hold, but such numbers lie in a very specific range so we can ignore them here). If the mantissa is adjusted so it always has a single 1 as the integer part two things happen. First, we do not represent the integer part (as it is always 1 in normalized numbers). Second, to make things sound we need an exponent which compensates the mantissa being normalized. This means that the number -101.110111 (remember that it is a binary real number) will be represented by a sign = 1, mantissa = 1.01110111 and exponent = 2 (because we moved the dot 2 digits to the left). Similarly, number 0.0010110111 is represented with a sign = 0, mantissa = 1.0110111 and exponent = -3 (we moved the dot 3 digits to the right).
In order for different computers to be able to share floating point numbers, IEEE 754 standardizes the format of a floating point number. VFPv2 supports two of the IEEE 754 numbers: Binary32 and Binary64, usually known by their C types, float and double, or by single- and double-precision, respectively. In a single-precision floating point the mantissa is 23 bits (+1 of the integer one for normalized numbers) and the exponent is 8 bits (so the exponent ranges from -126 to 127). In a double-precision floating point the mantissa is 52 bits (+1) and the exponent is 11 bits (so the exponent ranges from -1022 to 1023). A single-precision floating point number occupies 32 bit and a double-precision floating point number occupies 64 bits. Operating double-precision numbers is in average one and a half to twice slower than single-precision.
Goldberg’s famous paper is a classical reference that should be read by anyone serious when using floating point numbers.
Coprocessors
As I stated several times in earlier chapters, ARM was designed to be very flexible. We can see this in the fact that ARM architecture provides a generic coprocessor interface. Manufacturers of system-on-chips may bundle additional coprocessors. Each coprocessor is identified by a number and provides specific instructions. For instance the Raspberry Pi SoC is a BCM2835 which provides a multimedia coprocessor (which we will not discuss here).
That said, there are two standard coprocessors in the ARMv6 architecture: 10 and 11. These two coprocessors provide floating point support for single and double precision, respectively. Although the floating point instructions have their own specific names, they are actually mapped to generic coprocessor instructions targeting coprocessor 10 and 11.
Vector Floating-point v2
ARMv6 defines a floating point subarchitecture called the Vector Floating-point v2 (VFPv2). Version 2 because earlier ARM architectures supported a simpler form called now v1. As stated above, the VFP is implemented on top of two standarized coprocessors 10 and 11. ARMv6 does not require VFPv2 be implemented in hardware (one can always resort to a slower software implementation). Fortunately, the Raspberry Pi does provide a hardware implementation of VFPv2.
VFPv2 Registers
We already know that the ARM architecture provides 16 general purpose registers r0 to r15, where some of them play special roles: r13, r14 and r15. Despite their name, these general purpose registers do not allow operating floating point numbers in them, so VFPv2 provides us with some specific registers. These registers are named s0 to s31, for single-precision, and d0 to d15 for double precision. These are not 48 different registers. Instead every dn is mapped to two (consecutive) registers s2n and s2n+1, where 0 ≤ n ≤ 15.
These registers are structured in 4 banks: s0–s7 (d0–d3), s8–s15 (d4–d7), s16–s23 (d8–d11) and s24–s31 (d12–d15). We will call the first bank (bank 0, s0–s7, d0–d3) the scalar bank, while the remaining three are vectorial banks (below we will see why).
vfp-registers
VFPv2 provides three control registers but we will only be interested in one called fpscr. This register is similar to the cpsr as it keeps the usual comparison flags N, Z, C and V. It also stores two fields that are very useful, len and stride. These two fields control how floating point instructions behave. We will not care very much of the remaining information in this register: status information of the floating point exceptions, the current rounding mode and whether denormal numbers are flushed to zero.

Arithmetic operations

Most VFPv2 instructions are of the form fname Rdest, Rsource1, Rsource2 or fname Rdest, Rsource1. They have three modes of operation.
    Scalar. This mode is used when the destination register is in bank 0 (s0–s7 or d0–d3). In this case, the instruction operates only with Rsource1 and Rsource2. No other registers are involved.
    Vectorial. This mode is used when the destination register and Rsource2 (or Rsource1 for instructions with only one source register) are not in the bank 0. In this case the instruction will operate as many registers (starting from the given register in the instruction and wrapping around the bank of the register) as defined in field len of the fpscr (at least 1). The next register operated is defined by the stride field of the fpscr (at least 1). If wrap-around happens, no register can be operated twice.
    Scalar expanded (also called mixed vector/scalar). This mode is used if Rsource2 (or Rsource1 if the instruction only has one source register) is in the bank0, but the destination is not. In this case Rsource2 (or Rsource1 for instructions with only one source) is left fixed as the source. The remaining registers are operated as in the vectorial case (this is, using len and stride from the fpscr). 

Ok, this looks pretty complicated, so let’s see some examples. Most instructions end in .f32 if they operate on single-precision and in .f64 if they operate in double-precision. We can add two single-precision numbers using vadd.f32 Rdest, Rsource1, Rsource2 and double-precision using vadd.f64 Rdest, Rsource1, Rsource2. Note also that we can use predication in these instructions (but be aware that, as usual, predication uses the flags in cpsr not in fpscr). Predication would be specified before the suffix like in vaddne.f32. 
// For this example assume that len = 4, stride = 2
vadd.f32 s1, s2, s3  /* s1 ← s2 + s3. Scalar operation because Rdest = s1 in the bank 0 */
vadd.f32 s1, s8, s15 /* s1 ← s8 + s15. ditto */
vadd.f32 s8, s16, s24 /* s8  ← s16 + s24
                         s10 ← s18 + s26
                         s12 ← s20 + s28
                         s14 ← s22 + s30 or more compactly {s8,s10,s12,s14} ← {s16,s18,s20,s22} + {s24,s26,s28,s30}
                         Vectorial, since Rdest and Rsource2 are not in bank 0
                     */
vadd.f32 s10, s16, s24 /* {s10,s12,s14,s8} ← {s16,s18,s20,s22} + {s24,s26,s28,s30}.
                          Vectorial, but note the wraparound inside the bank after s14.
                       */
vadd.f32 s8, s16, s3 /* {s8,s10,s12,s14} ← {s16,s18,s20,s22} + {s3,s3,s3,s3}
                        Scalar expanded since Rsource2 is in the bank 0
                     */
Load and store

Once we have a rough idea of how we can operate floating points in VFPv2, a question remains: how do we load/store floating point values from/to memory? VFPv2 provides several specific load/store instructions.

We load/store one single-precision floating point using vldr/vstr. The address of the load/store must be already in a general purpose register, although we can apply an offset in bytes which must be a multiple of 4 (this applies to double-precision as well).

vldr s1, [r3]         /* s1 ← *r3 */
vldr s2, [r3, #4]     /* s2 ← *(r3 + 4) */
vldr s3, [r3, #8]     /* s3 ← *(r3 + 8) */
vldr s4, [r3, #12]     /* s3 ← *(r3 + 12) */

vstr s10, [r4]        /* *r4 ← s10 */
vstr s11, [r4, #4]     /* *(r4 + 4) ← s11 */
vstr s12, [r4, #8]     /* *(r4 + 8) ← s12 */
vstr s13, [r4, #12]      /* *(r4 + 12) ← s13 */

We can load/store several registers with a single instruction. In contrast to general load/store, we cannot load an arbitrary set of registers but instead they must be a sequential set of registers.

// Here precision can be s or d for single-precision and double-precision
// floating-point-register-set is {sFirst-sLast} for single-precision 
// and {dFirst-dLast} for double-precision
vldm indexing-mode precision Rbase{!}, floating-point-register-set
vstm indexing-mode precision Rbase{!}, floating-point-register-set

The behaviour is similar to the indexing modes we saw in chapter 10. There is a Rbase register used as the base address of several load/store to/from floating point registers. There are only two indexing modes: increment after and decrement before. When using increment after, the address used to load/store the floating point value register is increased by 4 after the load/store has happened. When using decrement before, the base address is first subtracted as many bytes as foating point values are going to be loaded/stored. Rbase is always updated in decrement before but it is optional to update it in increment after.

vldmias r4, {s3-s8} /* s3 ← *r4
s4 ← *(r4 + 4)
s5 ← *(r4 + 8)
s6 ← *(r4 + 12)
s7 ← *(r4 + 16)
s8 ← *(r4 + 20)
*/
vldmias r4!, {s3-s8} /* Like the previous instruction
but at the end r4 ← r4 + 24 
*/
vstmdbs r5!, {s12-s13} /*  *(r5 - 4 * 2) ← s12
*(r5 - 4 * 1) ← s13
r5 ← r5 - 4*2
*/

For the usual stack operations when we push onto the stack several floating point registers we will use vstmdb with sp! as the base register. To pop from the stack we will use vldmia again with sp! as the base register. Given that these instructions names are very hard to remember we can use the mnemonics vpush and vpop, respectively.

vpush {s0-s5} /* Equivalent to vstmdb sp!, {s0-s5} */
vpop {s0-s5}  /* Equivalent to vldmia sp!, {s0-s5} */

Movements between registers

Another operation that may be required sometimes is moving among registers. Similar to the mov instruction for general purpose registers there is the vmov instruction. Several movements are possible.

We can move floating point values between two floating point registers of the same precision

vmov s2, s3  /* s2 ← s3 */

Between one general purpose register and one single-precision register. But note that data is not converted. Only bits are copied around, so be aware of not mixing floating point values with integer instructions or the other way round.

vmov s2, r3  /* s2 ← r3 */
vmov r4, s5  /* r4 ← s5 */

Like the previous case but between two general purpose registers and two consecutive single-precision registers.

vmov s2, s3, r4, r10 /* s2 ← r4
s3 ← r10 */

Between two general purpose registers and one double-precision register. Again, note that data is not converted.

vmov d3, r4, r6  /* Lower32BitsOf(d3) ← r4
Higher32BitsOf(d3) ← r6
*/
vmov r5, r7, d4 /* r5 ← Lower32BitsOf(d4)
r7 ← Higher32BitsOf(d4)
*/

Conversions

Sometimes we need to convert from an integer to a floating-point and the opposite. Note that some conversions may potentially lose precision, in particular when a floating point is converted to an integer. There is a single instruction vcvt with a suffix .T.S where T (target) and S (source) can be u32, s32, f32 and f64 (S must be different to T). Both registers must be floating point registers, so in order to convert integers to floating point or floating point to an integer value an extra vmov instruction will be required from or to an integer register before or after the conversion. Because of this, for a moment (between the two instructions) a floating point register will contain a value which is not a IEEE 754 value, bear this in mind.

vcvt.f64.f32 d0, s0  /* Converts s0 single-precision value 
to a double-precision value and stores it in d0 */

vcvt.f32.f64 s0, d0  /* Converts d0 double-precision value 
to a single-precision value  and stores it in s0 */

vmov s0, r0          /* Bit copy from integer register r0 to s0 */
vcvt.f32.s32 s0, s0  /* Converts s0 signed integer value 
to a single-precision value and stores it in s0 */

vmov s0, r0          /* Bit copy from integer register r0 to s0 */
vcvt.f32.u32 s0, s0  /* Converts s0 unsigned integer value 
to a single-precision value and stores in s0 */

vmov s0, r0          /* Bit copy from integer register r0 to s0 */
vcvt.f64.s32 d0, s0  /* Converts r0 signed integer value 
to a double-precision value and stores in d0 */

vmov s0, r0          /* Bit copy from integer register r0 to s0 */
vcvt.f64.u32 d0, s0  /* Converts s0 unsigned integer value 
to a double-precision value and stores in d0 */

Modifying fpscr

The special register fpscr, where len and stride are set, cannot be modified directly. Instead we have to load fpscr into a general purpose register using vmrs instruction. Then we operate on the register and move it back to the fpscr, using the vmsr instruction.

The value of len is stored in bits 16 to 18 of fpscr. The value of len is not directly stored directly in these bits. Instead, we have to subtract 1 before setting the bits. This is because len cannot be 0 (it does not make sense to operate 0 floating points). This way the value 000 in these bits means len = 1, 001 means len = 2, …, 111 means len = 8. The following is a code that sets len to 8.

/* Set the len field of fpscr to be 8 (bits: 111) */
mov r5, #7                            /* r5 ← 7. 7 is 111 in binary */
mov r5, r5, LSL #16                   /* r5 ← r5 << 16 */
vmrs r4, fpscr                        /* r4 ← fpscr */
orr r4, r4, r5                        /* r4 ← r4 | r5. Bitwise OR */
vmsr fpscr, r4                        /* fpscr ← r4 */

stride is stored in bits 20 to 21 of fpscr. Similar to len, a value of 00 in these bits means stride = 1, 01 means stride = 2, 10 means stride = 3 and 11 means stride = 4.
Function call convention and floating-point registers

Since we have introduced new registers we should state how to use them when calling functions. The following rules apply for VFPv2 registers.

Fields len and stride of fpscr are zero at the entry of a function and must be zero when leaving it.
We can pass floating point parameters using registers s0–s15 and d0–d7. Note that passing a double-precision after a single-precision may involve discarding an odd-numbered single-precision register (for instance we can use s0, and d1 but note that s1 will be unused).
All other floating point registers (s16–s31 and d8–d15) must have their values preserved upon leaving the function. Instructions vpush and vpop can be used for that.
If a function returns a floating-point value, the return register will be s0 or d0. 

Finally a note about variadic functions like printf: you cannot pass a single-precision floating point to one of such functions. Only doubles can be passed. So you will need to convert the single-precision values into double-precision values. Note also that usual integer registers are used (r0–r3), so you will only be able to pass up to 2 double-precision values, the remaining must be passed on the stack. In particular for printf, since r0 contains the address of the string format, you will only be able to pass a double-precision in {r2,r3}.
Assembler

Make sure you pass the flag -mfpu=vfpv2 to as, otherwise it will not recognize the VFPv2 instructions. 

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Shifts and Rotates             │
@└────────────────────────────────┘
Three types of shifts:
    Logical: Logically shifting a number left to right by one position has the effect of doubleing it or halving it. By increasing the number of logical shifts you can multiply and divide numbers accordingly.
    Arithimetic: In an arithmetical shift the sign bit is preserved. Ensures that division is performed correctly for both positive and negative numbers.
    Rotate Right: Rotate Right (ROR) moves the bits out from the low end and feeds them straight back in the high end. The last bit rotated out is also copied into the Carry Flag as well as being rotated around.
    Rotate Extended: Cannot specify the number of movements it only shifts right once. The carry flag value is dropped into b31 and the value of b0 is put into the carry flag. Pretty much a 32bit shift right
@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Mnemonic  │  Meaning                 │
@├──────────────────────────────────────┤
@│   LSL     │ Logical shift left       │
@│   LSR     │ Logical shift right      │
@│   ASL     │ Arithimetic shift left   │
@│   ASR     │ Arithimetic shift right  │
@│   ROR     │ Rotate right             │
@│   RRX     │ Rotate Right with eXtend │
@└──────────────────────────────────────┘

Logical shift left: bit b31 drops into the carry flag
@┌───────────────────────────────────────────────────────────────────────┐
@│ LSL    │ C   │           Word               │     │    │    │    │    │
@├───────────────────────────────────────────────────────────────────────┤
@│ Before │ x   │ b31 │ b30  │ b29 │ b28 │ b27 │ ... │ b3 │ b2 │ b1 │ b0 │
@│ After  │ b31 │ b30 │ b29  │ b28 │ b27 │ b26 │ ... │ b2 │ b1 │ b0 │ 0  │
@└───────────────────────────────────────────────────────────────────────┘

Logical shift right: Bit b0 drops off into the carry flag
@┌───────────────────────────────────────────────────────────────────────┐
@│ LSL    │ C   │           Word               │     │    │    │    │    │
@├───────────────────────────────────────────────────────────────────────┤
@│ Before │ x   │ b31 │ b30  │ b29 │ b28 │ b27 │ ... │ b3 │ b2 │ b1 │ b0 │
@│ After  │ b0  │  0  │ b31  │ b30 │ b29 │ b28 │ ... │ b4 │ b3 │ b2 │ b1 │
@└───────────────────────────────────────────────────────────────────────┘

Arithmeticl shift right: Bit b0 drops off into the carry flag
@┌───────────────────────────────────────────────────────────────────────┐
@│ LSL    │ C   │           Word               │     │    │    │    │    │
@├───────────────────────────────────────────────────────────────────────┤
@│ Before │ x   │ b31 │ b30  │ b29 │ b28 │ b27 │ ... │ b3 │ b2 │ b1 │ b0 │
@│ After  │ b0  │ b31 │ b31  │ b30 │ b29 │ b28 │ ... │ b4 │ b3 │ b2 │ b1 │
@└───────────────────────────────────────────────────────────────────────┘

Rotation Right
@┌───────────────────────────────────────────────────────────────────────┐
@│ LSL    │ C   │           Word               │     │    │    │    │    │
@├───────────────────────────────────────────────────────────────────────┤
@│ Before │ x   │ b31 │ b30  │ b29 │ b28 │ b27 │ ... │ b3 │ b2 │ b1 │ b0 │
@│ After  │ b0  │ b0  │ b31  │ b30 │ b29 │ b28 │ ... │ b4 │ b3 │ b2 │ b1 │
@└───────────────────────────────────────────────────────────────────────┘

Rotation Right Extended
@┌───────────────────────────────────────────────────────────────────────┐
@│ LSL    │ C   │           Word               │     │    │    │    │    │
@├───────────────────────────────────────────────────────────────────────┤
@│ Before │ x   │ b31 │ b30  │ b29 │ b28 │ b27 │ ... │ b3 │ b2 │ b1 │ b0 │
@│ After  │ b0  │  x  │ b31  │ b30 │ b29 │ b28 │ ... │ b4 │ b3 │ b2 │ b1 │
@└───────────────────────────────────────────────────────────────────────┘



@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Immediate Constant Range       │
@└────────────────────────────────┘
Immediates only have 12bits to represnt them. 0000 0000 0000.
The 12-bit field is split into two, one part of 8bits xxxx 0000 0000 and one part 4-bits 0000 xxxx xxxx.
The 8-bit field is used to represent a numeric constant. The 4-bit field one of 16 different positions (them selves then shifted by two) which the 8-bit value may be rotated to through an even number of positions.

Examples:
Using 173 as immediiate constant, in binary this is:
00000000 00000000 00000000 10101101
The value can be presented in 8-bits, so no shift is required and the position bits will be set to 0.

Examine the number 19,968. In binary this is:
00000000 00000000 01001110 00000000

If we compare this to the patterns in Figure below, we can see this as the value placed at position 12. To create this number as an immediate operand we would use 78 (01001110) and rotated it right by 24.

Bit31                           Bit0  Position  ROR
++++++++ ++++++++ ++++++++ 76543210   0         0
10++++++ ++++++++ ++++++++ ++765432   1         2
3210++++ ++++++++ ++++++++ ++++7654   2         4
543210++ ++++++++ ++++++++ ++++++76   3         6
76543210 ++++++++ ++++++++ ++++++++   4         8
++765432 10++++++ ++++++++ ++++++++   5         10
++++7654 3210++++ ++++++++ ++++++++   6         12
++++++76 543210++ ++++++++ ++++++++   7         14
++++++++ 76543210 ++++++++ ++++++++   8         16
++++++++ ++765432 10++++++ ++++++++   9         18
++++++++ ++++7654 3210++++ ++++++++   10        20
++++++++ ++++++76 543210++ ++++++++   11        22
++++++++ ++++++++ 76543210 ++++++++   12        24
++++++++ ++++++++ ++765432 10++++++   13        26
++++++++ ++++++++ ++++7654 3210++++   14        28
++++++++ ++++++++ ++++++76 543210++   15        30

This provides us with the second way that an immediate operand can be specified as a shifted operand, and this takes the format shown:
Instruction (<Suffic>) <Op1>, <Op2>, <Op3>, <Shift>
Example:
mov r0, r1, ror #24 @ store in r0, r1 right rotated by 24

Of course, we can use all these values directly as immediate constants as the assembler will resolve them directly for us. 
mov r0, #19968

It is the values that cannot be calculated in this way through fig above that are the issue.

Although 257 cannot be used as an immediate constant, it can be created by storing 256 in a register then adding 1.

add r0, r1, #257 @ Invalid constant error

mov r2, #256
add r2, r2, #1
add r0, r1, r2   @add 257 to r1 put it in r0

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Multiplication by Constants    │
@└────────────────────────────────┘
            n= 1,2,3,4
To multiply by 2,4,8,16.. 2^n; 
mov r0, r0, lsl #n
            n= 1,2,3,4
To multiply by 3,5,9,17 ... (2^n)+1; 
add r0, r0, r0, lsl #n
            n= 1,2,3,4
To multiply by 1,3,7,15... (2^n)-1
rsb r0, r0, r0, lsl #n

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ ADR Directive                  │
@└────────────────────────────────┘
adr <register>, <label>    
    ADR is a directive not an ARM instruction. It is part of the assembler. Does address calculation for you
    1. Notes the address of where the instruction is being assembled
    2. Notes the address of the specified label
    3. Calculates the offset between the two memory positions.
    Can only access references in the .text (executable) section of your code.

.word directive. Allows you to store a word (4 bytes) into memory.
LDR r0, =string
       can access memory across the board. Not restricted to .text sections

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Address Write Back             │
@└────────────────────────────────┘
! used for write back
LDR r0, [r1,r2]!    @ with the ! the calcualted address r1+r2 is stored back into r1.
                    @ this could be used for looping through an array a word at a time by LDR r0, [r1,#4]!

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Post-Indexed Addressing        │
@└────────────────────────────────┘
Post-indexed addressing uses the write back feature by default. 
LDR (<suffix>) <destination>, [<Op1>], <Opt2>
Examples:
    LDR r0,[r1],r2
    STR r3, [r4], #4
    LDRB r6,[r1],r5,LSL #1   @ load a byte
When post-indexed addressing is used, the contents of the base regiter alone are taken as the source or destination address. Only after the memory has been extracted or deposited are the contents of the offset field (Opt2) added to the base registrer and the value written to the base register.
This means say for 
LDR r0, [r1], #8
That the value at location r1 is first loaded into r0 and then 8 is added to r1 and the sum is stored in r1.

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Block Transfer                 │
@└────────────────────────────────┘
Transfer or load more than one register at a time.
LDM <Options>(<Suffix>) <Op1>(!), {<Comma separted list of registers, or a range of registers separated by a ->}
STM <Options>(<Suffix>) <Op1>(!), {<Comma separted list of registers, or a range of registers separated by a ->}
    Registers can be listed in any order and a range of registers can be speciified with the use of a hyphen r5-r9
    Operand1: 
        is a register which contains the address marking the start of memory to be used in the operation. This address is not changed unless the write back operator ! is used in the instruction
    reglist:
        is a list of registers to be loaded or stored, enclosed in braces. It can conatin register ranges. It must be comma separated if it contains more than on register or register range.
    Example:
        STM r0, {r1, r5-r8}
You can control the direction of the storage and wether the pointer is increased before or after the transfer.

    @┌────────────────────────────┐
    @│ Suffix │ Meaning           │
    @├────────────────────────────┤
    @│ IA     │ Increment After   │  Increment: Address + 4b * n; where n is the position
    @│ IB     │ Increment Before  │
    @│ DA     │ Decrement After   │  Decrement: Address - 4b * n;
    @│ DB     │ Decrement Before  │
    @└────────────────────────────┘

Before or after means, say for STMIA, store the value first then increment the pointer. STMIB means, first increment the pointer then store the data.
Unless Write Back is asked for, the address in the specified register Op1 remains unaltered. The address calculated after the last register in the list has been processed.

One good use of STMIA is saving and restoring register state.
STMIA r0, {r1-r14}
LDMDA r0, {r1-r14}

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Stacks                         │
@└────────────────────────────────┘
By default the ARM implements a full descending stack if a format is not specified.
Stacks can use the above table of IA, IB etc. but ARM also gives you postfixes for stacks

    @┌──────────────────────────────────┐
    @│ Postfix │ Meaning                │
    @├──────────────────────────────────┤
    @│ FA      │ Full Ascending stack   │
    @│ FD      │ Full Decending stack   │
    @│ EA      │ Empty Ascending Stack  │
    @│ ED      │ Empty Descending Stack │
    @└──────────────────────────────────┘

Full Ascending stack: means the stack gross with increasing address, and the stack pointer points to a cell with a value in it. Points to the last occupied address on the stack
Full Decending stack: means the stack gross with decreasing addresses, and the stack pointer points to a cell with a value in it. Indecates the next avaiable space
Empty Ascending stack: means the stack grows with increasing address, and the stack pointer points to a cell with no value in it.
Empty Descending stack: means teh stack grows with decreasing addresses, an the stack pointer points to a cell with no value ini it.
    @┌────────────────────────────────────────────┐
    @│ Instruction Pair │ Stack Type              │
    @├────────────────────────────────────────────┤
    @│ STMFD / LDMFD    │ Full Descending stack   │
    @│ STMFA / LDMFA    │ Full Ascending Stack    │
    @│ STMED / LDMED    │ Empty Descending Stack  │
    @│ STMEA / LDMEA    │ Empty Ascending Stack   │
    @└────────────────────────────────────────────┘

STMDB = STMFD

@ 
@ Bit=1, Nibble = 4bits, Byte = 8bits, Halfword = 16bits, Word = 32bits, Doubleword = 64bits*/
@ Memory is address in byte blocks
@
@    MOV fp, sp
@    
@    SUB sp, sp, #12                 @ Make room for max_y and max_x, and direction. See EOF for pic of the stack, for a refresher.
                                     @ fp-4 = max_x; fp-8 = max_y
                                     @ fp-12 = direction
@    max_x=-4; max_y=-8;             @ offset for max_x and max_y from the fp
@    MOV   r0, #1                    @ max_x = 0;
@    MOV   r1, #0                    @ max_y = 0;
@    MOV   r2, #0
@    STMDB fp, {r0,r1,r2}            @ store it. with out write back, so fp does not move.
                                     @ STMDB = STMFD. When this is written it's written r2,r1,r0 in memory. This then looks correct when looking up from the sp. SP see the values from r0,r1,r2
@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│What the stack looks like at the start of the program.  │
@└────────────────────────────────────────────────────────┘
@           ┍━━━━━━┑  
@           ├──────┤ ---------------------
@ 0xbefff170│ 0xXX │ <-SP(r13), FP(r11)                     Some notes for addressing. For a full stack you don't count the byte you are on.
@           ├──────┤ --------------------- byte             
@ 0xbefff16f│ 0x00 │
@           ├──────┤ --------------------- Halfword
@ 0xbefff16e│ 0x00 │ 
@           ├──────┤
@ 0xbefff16d│ 0x00 │
@           ├──────┤ --------------------- Word
@ 0xbefff16c│ 0x00 │ max_x= FP-4                            But when you write to an address, you start at the byte the address is pointing at.
@           ├──────┤
@ 0xbefff16b│ 0x00 │
@           ├──────┤
@ 0xbefff16a│ 0x00 │
@           ├──────┤
@ 0xbefff169│ 0x00 │
@           ├──────┤
@ 0xbefff168│ 0x00 │ max_y= FP-8
@           ├──────┤
@ 0xbefff167│ 0x01 │
@           ├──────┤
@ 0xbefff166│ 0x00 │
@           ├──────┤
@ 0xbefff165│ 0x00 │   
@           ├──────┤
@ 0xbefff164│ 0x00 │ <-SP(r13) direction= FP-12   
@           ├──────┤
@ 0xbefff163│      │   
@           ├──────┤
@ 0xbefff162│      │   
@           ├──────┤
@ 0xbefff161│      │   
@           ├──────┤
@ 0xbefff160│      │     
@           ├──────┤
@ 0xbefff15f│      │
@           ├──────┤
@ 0xbefff15e│      │
@           ├──────┤
@ 0xbefff15d│      │
@           ├──────┤
@ 0xbefff15c│      │   
@           ├──────┤
@ 0xbefff15b│      │    
@           ├──────┤
@ 0xbefff15a│      │   
@           ├──────┤
@ 0xbefff159│      │   
@           ├──────┤
@ 0xbefff158│      │
@           ├──────┤
@ 0xbefff157│      │
@           ├──────┤
@ 0xbefff156│      │   
@           ├──────┤
@ 0xbefff155│      │    
@           ├──────┤
@ 0xbefff154│      │   
@           ├──────┤
@ 0xbefff153│      │   
@           ├──────┤
@ 0xbefff152│      │
@           ├──────┤
@ 0xbefff151│      │
@           ├──────┤
@ 0xbefff150│      │   
@           ├──────┤
@ 0xbefff14f│      │    
@           ├──────┤
@ 0xbefff14e│      │   
@           ├──────┤
@ 0xbefff14d│      │   
@           ├──────┤
@ 0xbefff14c│      │   
@           ├──────┤
@ 0xbefff14b│      │   
@           └──────┘
@
@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Directives                     │
@└────────────────────────────────┘
.ascii ""
.asciz ""

.word 0xFFFFFFFF, 0xFF  @Store four-btye values, separated by commas into memory.

.byte 1,2,3,4  @comma separated list of numbers in the range of 0 to 255. Store byte sized values, separated by commas into memory.

.equ variableName, <value>  @kind of like defining variables. Assign immediate value to named label. Example: .equ one, 1   or one equ 1

.align <number>  @ If you store data in the .text section of your program, then it must start on a word boundary. If you insert text or data that does not completely fill the space to a four-byte boundary then the assembler will issue an error message. "Unalgined opcodes detected in executable segment". Use align to pad the program.

You can use labels to mark the beginning and end of an array of bytes
    Example:
        values:
            .byte 1,2,3,4,5,6,7,8,9
        endvalues:
Then just load the address of values into a register and endvalues into another, increment the first address until it equals the second.

.float
.req      @ The register equate directive maps a symbol to a register. Its a bit like using a define statement in C. I use them all the time because it makes the source just that much easier to read.
                Example: li .req r0  @ mapped the symbol li to r0. 
.unreq alias @ removes the above equate
.rept <n>  @ Repeat directive repeats a block of code terminated by .endr n times.

PUSH
POP
VPUSH
VPOP    @Vector pop for double percision numbers
@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Creating Functions             │
@└────────────────────────────────┘

    @┌────────────────────────────────────────────────────┐
    @│ Register │      Role                │  Contents    │ 
    @│          │                          │  Preservered │
    @├────────────────────────────────────────────────────┤
    @│    r0    │  Argument and Result     │   No         │
    @│    r1    │        Argument          │   No         │
    @│    r2    │        Argument          │   No         │
    @│    r3    │        Argument          │   No         │
    @│    r4    │        General           │   Yes        │
    @│    r5    │        General           │   Yes        │
    @│    r6    │        General           │   Yes        │
    @│    r7    │        General           │   Yes        │
    @│    r8    │        General           │   Yes        │
    @│    r9    │        General           │   Yes        │
    @│    r10   │        General           │   Yes        │
    @│    r11   │        General           │   Yes        │
    @│    r12   │        General           │   Yes        │
    @│    LR    │     Return Address       │   No         │
    @│    SP    │     Stack Pointer        │   Yes        │
    @└────────────────────────────────────────────────────┘

Chart above details the purpose of each register when a function is called. In summary a function should adhere to the following:
    It may freely modify registers r0, r1, r2, r3 and expect to find the information in them that it requires to carry out it's task.
    It can modify registers r4-12, providing it restores their calues before returning to the calling routine.
    It can modify the Stack Pointer providing it restores the value held on entry.
    It must presever the address in the Link Register so that it may return correctly to the calling program. 
    It should make no assumptions as to the contents of the CPSR. As far as the function is concerned the status of the N, Z, C and V falgs are unknown.


@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Vector Floating Point (VFP)    │
@└────────────────────────────────┘
Single percision floating point registers are s0-s31. They are one word wide. 
Double percision floating point registers are d0-d15. They are two words wide.
The registers are one and the same. So s0 and s1 can be used individually or combined as d0 for double percision.
Scalar banks s0-s7/d0-d3
Vectorial banks s8-s31/d4-d15

Scalar. This mode is used when the destination register is in bank 0 (s7 or d0-d3). In this case, the instruction operates only with Rsource1 and Rsource2. No other registers are involved.

Vectorial. This mode is used when the destination register and Rsource2 (or Rsource1 for instructions with only one source register) are not in the bank 0. In this case the instruction will operate as many registers (starting from the given register in the instruction and wrapping around the bank of the register) as defined in field len of the fpscr (at least 1). The next register operated is defined by the stride field of the fpscr (at least 1). If wrap-around happens, no register can be operated twice.

Scalar expanded (also called mixed vector/scalar). This mode is used if Rsource2 (or Rsource1 if the instruction only has one source register) is in the bank0, but the destination is not. In this case Rsource2 (or Rsource1 for instructions with only one source) is left fixed as the source. The remaining registers are operated as in the vectorial case (this is, using len and stride from the fpscr).



@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ VFP Control Register           │
@└────────────────────────────────┘
FPSCR Floating point & Status Control Register
    @┌──────────────────────────────────────────────────────────────────────┐
    @│ FPSCR Format       │ Rd  │  │   │ │ Vector │  │ Exception │  │ CEB   │
    @├──────────────────────────────────────────────────────────────────────┤
    @│31│30│29│28       24│23│22│21│20 │ │18│17│16│  │ 12       7│  │4    0 │
    @├──────────────────────────────────────────────────────────────────────┤
    @│N │Z │C │V │ │ │ │  │Rmode│Stride│ │ Len    │  │ │ │ │ │ │ │  │ │ │ │ │
    @└──────────────────────────────────────────────────────────────────────┘
Register Function Summary
    @┌─────────────────────────────────────────────────────────────────────────────────┐
    @│ Bit   │ Flag Set              │  Detail                                         │ 
    @├─────────────────────────────────────────────────────────────────────────────────┤
    @│ 31-28 │  Condition Flags      │   Negative, Zero, Carry, Overflow               │
    @│ 23-22 │  Rounding Mode        │   Controls how values are rounded               │
    @│ 21-20 │  Stride               │   Controls the sttep size taken in vector banks │
    @│ 18-16 │  Len                  │   Controls the Vector length                    │
    @│ 12-8  │  Exception Status     │   Enables trapping of exception types.          │
    @│ 4-0   │  Cumulative Exception │   Trap cumulative exceptions                    │
    @└─────────────────────────────────────────────────────────────────────────────────┘
APSR (Application Program Status Register - CPSR)

Condition code comparisoin ARM vs VFP

    @┌──────────────────────────────────────────────────────────────┐
    @│ Mnemonic │ Meaning after ARM inst.  │Detail                  │ 
    @├──────────────────────────────────────────────────────────────┤
    @│ EQ      │ Equal                     │ Equal                  │
    @│ NE      │ Not equal                 │ No equal, or unordered │
    @│ CS      │ Carry set                 │ >=, or unordered       │
    @│ HS      │ Unsigned higher or same   │ >=, or unordered       │
    @│ CC      │ Carry clear               │ <                      │
    @│ LO      │ Unsigned lower            │ <                      │
    @│ MI      │ Negative                  │ <                      │
    @│ PL      │ Positive or zero          │ >=, or unordered       │
    @│ VS      │ Overflow                  │ Unordered              │
    @│ VC      │ No overflow               │ Not unordered          │
    @│ HI      │ Unsigned Higher           │ > or unordered         │
    @│ LS      │ Unsigned Lower or same    │ < or equal             │
    @│ GE      │ Signed >=                 │ >=                     │
    @│ LT      │ Signed <                  │ < or unordered         │
    @│ GT      │ Signed >                  │ >                      │
    @│ LE      │ Signed <=                 │ <= or unordered        │
    @│ AL      │ Always                    │ Always                 │
    @└──────────────────────────────────────────────────────────────┘

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Exception Handling             │
@└────────────────────────────────┘
IRQ: Interrupt Rquest Mode. is deemed to be lower priority where a slight delay will not create any problems.
FIQ: Fast Interrupt Mode. THese are interrupts deemed to be ones that have highest priority and are the ones that must be serviced first.

    @┌──────────────────────────────────────────────────────────────────────────────────┐
    @│ Mode                │ Description                                                │ 
    @├──────────────────────────────────────────────────────────────────────────────────┤
    @│ FIQ                 │ Entered when a high priority (fast) interrupt is raised    │
    @│ IRQ                 │ Entered when a low priority (normal) interrupt is raised   │
    @│ Supervisor and Rest │ Entered on reset and when a Software Interrupt is executed │
    @│ Abort               │ Used to handle memort access violations                    │
    @│ Undef               │ Used to handle undefined insstructions                     │
    @│ User                │ Unprivileged mode under which most task run                │
    @└──────────────────────────────────────────────────────────────────────────────────┘

    @ Bit settings for Mode changes in CPSR
    @┌────────────────────────────────────────────┐
    @│              I   F   T        Mode         │ 
    @│              7   6   5   4   3   2   1   0 │
    @├────────────────────────────────────────────┤
    @│ Abort      │ 1 │ 1 │ 0 │ 1 │ 0 │ 1 │ 1 │ 1 │
    @│ FIQ        │ 1 │ 1 │ 0 │ 1 │ 0 │ 0 │ 0 │ 1 │
    @│ IRQ        │ 1 │ uc│ 0 │ 1 │ 0 │ 0 │ 1 │ 0 │
    @│ Supervisor │ 1 │ uc│ 0 │ 1 │ 0 │ 0 │ 1 │ 1 │
    @│ System     │ 1 │ 1 │ 0 │ 1 │ 1 │ 1 │ 1 │ 1 │
    @│ Undefined  │ 1 │ uc│ 0 │ 1 │ 1 │ 0 │ 1 │ 1 │
    @│ User       │ 0 │ 0 │ 0 │ 1 │ 0 │ 0 │ 0 │ 0 │
    @└────────────────────────────────────────────┘

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Vectors                        │
@└────────────────────────────────┘
A Vector is a known location in memorty that is exactly one word, or 32-bits wide. (Not to be confused with vectors in VFP.)
There are two types of vectors: hardware vectors and software vectors. Hardware vectors are hardwired to the ARM chip itself and they never change, and are located at the very beginning of memory.
In Raspbain, the vector table can be located at a higher address in memory, here starting at 0x0FFFF0000.
Hardware vectors control the ultimate flow of information and are a set of memory addresses that are 'known' to the ARM chip. The term 'known' here means that they are physically 'hard-wared' and are thus hardware vectors.
Hardware vectos typically control the flow of abnormal events which the chip itself cannnot deal with. They are often referred to as exception vectors and they reside at the start of memory map from 0x00000000 to 0x0000001C. 
    @ Hardware Vectors
    @┌────────────────────────────────────────────────────┐
    @│ Address    │ Hi Address │ Vector                   │ 
    @├────────────────────────────────────────────────────┤
    @│ 0x00000000 │ 0xFFFF0000 │ ARM reset                │
    @│ 0x00000004 │ 0xFFFF0004 │ Undefiend Instruction    │
    @│ 0x00000008 │ 0xFFFF0008 │ Software Interrupt (SWI) │
    @│ 0x0000000C │ 0xFFFF000C │ Abort (pre-fetch)        │
    @│ 0x00000010 │ 0xFFFF0010 │ Abort (pre-fetch)        │
    @│ 0x00000014 │ 0xFFFF0014 │ Address exceptoin        │
    @│ 0x00000018 │ 0xFFFF0018 │ IRQ                      │
    @│ 0x0000001C │ 0xFFFF001C │ FIRQ ( or FIQ)           │
    @└────────────────────────────────────────────────────┘

One common reason for manipulating the hardware vectors is to change the machine's response to memory access faults. If some non-existent memory is accessed then one of the memory fault vectors, 0x0000000C to 0x00000014, is called.
The normal effect of this is for the Operating System to report a fatal error and stop exceuting the current task. You could change this to just warn the user.

When an exception interrupt occurs the processor stops what it is doing and jumps to the appropriate location in the vector table. Each location contains a branc instruction pointing to the start of a specific handling routine.
These instructions normally take one of three forms as shown below

    @┌─────────────────────────────────────────────────────────────┐
    @│ Instruction           │ Description                         │ 
    @├─────────────────────────────────────────────────────────────┤
    @│ B <address>           │ Jump to an address gven as a        │
    @│                       │ relative                            │
    @│                       │ offset in to the PC.                │
    @│ LDR pc, [pc, #offset] │ Load address from memory to         │
    @│                       │ the PC. This address is a 32-bit    │
    @│                       │ value stored close to the vector    │
    @│                       │ table. This is slightly slower than │
    @│                       │ the previous method due to extra    │
    @│                       │ memory access. The bonus is that    │
    @│                       │ you can branch to any address in    │ 
    @│                       │ the memory map.                     │
    @│ LDR pc, [pc, #-0xFF0] │ Load address of a specific          │
    @│                       │ interrupt service routine from      │ 
    @│                       │ 0xFFFFF030 to the PC.               │
    @│ MOV pc, #value        │ Copies an immediate value into the  │
    @│                       │ PC. This will normally be a single  │
    @│                       │ byte value that is rotated right by │
    @│                       │ an even number of bits. Thus        │
    @│                       │ provides access to the full momory  │
    @│                       │ map but with gaps.                  │
    @└─────────────────────────────────────────────────────────────┘

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Pregix Operators               │
@└────────────────────────────────┘
- For negative numbers.
~ For bitwise not.

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Vector Instructions            │
@└────────────────────────────────┘
## Make sure you pass the flag -mfpu=vfpv2 to as, otherwise it will not recognize the VFPv2 instructions. ##

vldm indexing-mode precision Rbase{!}, floating-point-register-set
vstm indexing-mode precision Rbase{!}, floating-point-register-set

There is a Rbase register used as the base address of several load/store to/from floating point registers. There are only two indexing modes: increment after and decrement before. When using increment after, the address used to load/store the floating point value register is increased by 4 after the load/store has happened. When using decrement before, the base address is first substracted as many bytes as foating point values are going to be loaded/stored. Rbase is always updated in decrement before but it is optional to update it in increment after.
Example:
    vldmais r4, {s3-s8} /*
                         s3 <- *r4
                         s4 <- *(r4+4)
                         s5 <- *(r4+8)
                         s6 <- *(r4+12)
                         s7 <- *(r4+16)
                         s8 <- *(r4 + 20)
                        */
   vldmais r4!, {s3-s8} /* Like the previous instruction but at the end r4 <- r4 + 24 */

   vstmdbs r5!, {s12-s13} /*
                            *(r5 - 4*2) <- s12
                            *(r5 - 4*1) <- s13
                            r5 <- r5 - 4*2
                          */
For the usual stack operations when we push onto the stack several floating point registers we will use vstmdb with sp! as the base register. To pop from the stack we will use vldmia again with sp! as the base register. Given that these instructions names are very hard to remember we can use the mnemonics vpush and vpop, respectively.
vpush {s0-s5} /* Equivalent to vstmdb sp!, {s0-s5} */
vpop  {s0-s5} /* Equivalent to vldmia sp!, {s0-s5} */

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Modifying flscr                │
@└────────────────────────────────┘
The special register fpscr, where len and stride are set, cannot be modified directly. Instead we have to load fpscr into a general purpose register using vmrs instruction. Then we operate on the register and move it back to the fpscr, using the vmsr instruction.

The value of len is stored in bits 16 to 18 of fpscr. The value of len is not directly stored directly in these bits. Instead, we have to substract 1 before setting the bits. This is because len cannot be 0 (it does not make sense to operate 0 floating points). This way the value 000 in these bits means len = 1, 001 means len = 2, , 111 means len = 8. The following is a code that sets len to 8.
Example:
    /* Set the len field of fpscr to be 8 (bits: 111) */
    mov r5, #7                  /* r5 <- 7. 7 is 111 in binary */
    mov r5, r5, LSL #16         /* r5 <- r5 << 16 */
    vmrs r4, fpscr              /* r4 <- fpscr */
    orr r4, r4, r5              /* r4 <- r4 | r5. Bitwise OR */
    vmsr fpscr, r4
stride is stored in bits 20 to 21 of fpscr. Similar to len, a value of 00 in these bits means stride = 1, 01 means stride = 2, 10 means stride = 3 and 11 means stride = 4.

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Function call convention and Floating-Point registers   │
@└─────────────────────────────────────────────────────────┘
Since we have introduced new registers we should state how to use them when calling functions. The following rules apply for VFPv2 registers.
 * Fields len and stride of fpscr are zero at the entry of a function and must be zero when leaving it.
 * We can pass floating point parameters using registers s0-s15 and d0-d7. Note that passing a double-precision after a single-precision may involve discarding an odd-numbered single-precision register (for instance we can use s0, and d1 but note that s1 will be unused).
 * All other floating point registers (s16-s31 and d8-d15) must have their values preserved upon leaving the function. Instructions vpush and vpop can be used for that.
 * If a function returns a floating-point value, the return register will be s0 or d0.
Finally a note about variadic functions like printf: you cannot pass a single-precision floating point to one of such functions. Only doubles can be passed. So you will need to convert the single-precision values into double-precision values. Note also that usual integer registers are used (r0-r3), so you will only be able to pass up to 2 double-precision values, the remaining must be passed on the stack. In particular for printf, since r0 contains the address of the string format, you will only be able to pass a double-precision in {r2,r3}.

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Integer Divsion GCC            │
@└────────────────────────────────┘
bl __aeabi_idiv
bl __aeabi_uidiv

@┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
@│ Integer Mod GCC                │
@└────────────────────────────────┘
bl __aeabi_idivmod
bl __aeabi_uidivmod

SXT sign extend.
    SXT, SXTA, UXT, and UXTA

    Sign extend, Sign extend with Add, Zero extend, and Zero extend with Add.
    Syntax

    SXT<extend>{cond} {Rd}, Rm{, rotation}
    SXTA<extend>{cond} {Rd}, Rn, Rm{, rotation}
    UXT<extend>{cond} {Rd}, Rm{, rotation}
    UXTA<extend>{cond} {Rd}, Rn, Rm{, rotation}

    where:

    <extend>

    is one of:

    B16
        Extends two 8-bit values to two 16-bit values.
    B
        Extends an 8-bit value to a 32-bit value.
    H
        Extends a 16-bit value to a 32-bit value.
    cond
        is an optional condition code (see Conditional execution).
    Rd
        is the destination register.
    Rn
        is the register holding the number to add (SXTA and UXTA only).
    Rm
        is the register holding the value to extend.
    rotation
        is one of:

        ROR #8

        Value from Rm is rotated right 8 bits.
        ROR #16

        Value from Rm is rotated right 16 bits.
        ROR #24

        Value from Rm is rotated right 24 bits.

         If rotation is omitted, no rotation is performed.

     You must not use r15 for Rd, Rn, or Rm.


@############# Macros ######################
.MACRO HALF $p0
    MOV \$p0, \$p0, LSR  #1
.ENDM

.MACRO SHALF $p0
    MOV \$p0, \$p0, ASR  #1
.ENDM

.MACRO ZERO $p0
    MOV \$p0, #0
.ENDM
@###########################################

ASCII control characters (character code 0-31)
The first 32 characters in the ASCII-table are unprintable control codes and are used to control peripherals such as printers.
DEC	OCT	HEX	BIN	Symbol	HTML Number	HTML Name	Description
0	000	00	00000000	NUL	&#000;	 	Null char
1	001	01	00000001	SOH	&#001;	 	Start of Heading
2	002	02	00000010	STX	&#002;	 	Start of Text
3	003	03	00000011	ETX	&#003;	 	End of Text
4	004	04	00000100	EOT	&#004;	 	End of Transmission
5	005	05	00000101	ENQ	&#005;	 	Enquiry
6	006	06	00000110	ACK	&#006;	 	Acknowledgment
7	007	07	00000111	BEL	&#007;	 	Bell
8	010	08	00001000	BS	&#008;	 	Back Space
9	011	09	00001001	HT	&#009;	 	Horizontal Tab
10	012	0A	00001010	LF	&#010;	 	Line Feed
11	013	0B	00001011	VT	&#011;	 	Vertical Tab
12	014	0C	00001100	FF	&#012;	 	Form Feed
13	015	0D	00001101	CR	&#013;	 	Carriage Return
14	016	0E	00001110	SO	&#014;	 	Shift Out / X-On
15	017	0F	00001111	SI	&#015;	 	Shift In / X-Off
16	020	10	00010000	DLE	&#016;	 	Data Line Escape
17	021	11	00010001	DC1	&#017;	 	Device Control 1 (oft. XON)
18	022	12	00010010	DC2	&#018;	 	Device Control 2
19	023	13	00010011	DC3	&#019;	 	Device Control 3 (oft. XOFF)
20	024	14	00010100	DC4	&#020;	 	Device Control 4
21	025	15	00010101	NAK	&#021;	 	Negative Acknowledgement
22	026	16	00010110	SYN	&#022;	 	Synchronous Idle
23	027	17	00010111	ETB	&#023;	 	End of Transmit Block
24	030	18	00011000	CAN	&#024;	 	Cancel
25	031	19	00011001	EM	&#025;	 	End of Medium
26	032	1A	00011010	SUB	&#026;	 	Substitute
27	033	1B	00011011	ESC	&#027;	 	Escape
28	034	1C	00011100	FS	&#028;	 	File Separator
29	035	1D	00011101	GS	&#029;	 	Group Separator
30	036	1E	00011110	RS	&#030;	 	Record Separator
31	037	1F	00011111	US	&#031;	 	Unit Separator

ASCII printable characters (character code 32-127)
Codes 32-127 are common for all the different variations of the ASCII table, they are called printable characters, represent letters, digits, punctuation marks, and a few miscellaneous symbols. You will find almost every character on your keyboard. Character 127 represents the command DEL.
DEC	OCT	HEX	BIN	Symbol	HTML Number	HTML Name	Description
32	040	20	00100000	 	&#32;	 	Space
33	041	21	00100001	!	&#33;	 	Exclamation mark
34	042	22	00100010	"	&#34;	&quot;	Double quotes (or speech marks)
35	043	23	00100011	#	&#35;	 	Number
36	044	24	00100100	$	&#36;	 	Dollar
37	045	25	00100101	%	&#37;	 	Procenttecken
38	046	26	00100110	&	&#38;	&amp;	Ampersand
39	047	27	00100111	'	&#39;	 	Single quote
40	050	28	00101000	(	&#40;	 	Open parenthesis (or open bracket)
41	051	29	00101001	)	&#41;	 	Close parenthesis (or close bracket)
42	052	2A	00101010	*	&#42;	 	Asterisk
43	053	2B	00101011	+	&#43;	 	Plus
44	054	2C	00101100	,	&#44;	 	Comma
45	055	2D	00101101	-	&#45;	 	Hyphen
46	056	2E	00101110	.	&#46;	 	Period, dot or full stop
47	057	2F	00101111	/	&#47;	 	Slash or divide
48	060	30	00110000	0	&#48;	 	Zero
49	061	31	00110001	1	&#49;	 	One
50	062	32	00110010	2	&#50;	 	Two
51	063	33	00110011	3	&#51;	 	Three
52	064	34	00110100	4	&#52;	 	Four
53	065	35	00110101	5	&#53;	 	Five
54	066	36	00110110	6	&#54;	 	Six
55	067	37	00110111	7	&#55;	 	Seven
56	070	38	00111000	8	&#56;	 	Eight
57	071	39	00111001	9	&#57;	 	Nine
58	072	3A	00111010	:	&#58;	 	Colon
59	073	3B	00111011	;	&#59;	 	Semicolon
60	074	3C	00111100	<	&#60;	&lt;	Less than (or open angled bracket)
61	075	3D	00111101	=	&#61;	 	Equals
62	076	3E	00111110	>	&#62;	&gt;	Greater than (or close angled bracket)
63	077	3F	00111111	?	&#63;	 	Question mark
64	100	40	01000000	@	&#64;	 	At symbol
65	101	41	01000001	A	&#65;	 	Uppercase A
66	102	42	01000010	B	&#66;	 	Uppercase B
67	103	43	01000011	C	&#67;	 	Uppercase C
68	104	44	01000100	D	&#68;	 	Uppercase D
69	105	45	01000101	E	&#69;	 	Uppercase E
70	106	46	01000110	F	&#70;	 	Uppercase F
71	107	47	01000111	G	&#71;	 	Uppercase G
72	110	48	01001000	H	&#72;	 	Uppercase H
73	111	49	01001001	I	&#73;	 	Uppercase I
74	112	4A	01001010	J	&#74;	 	Uppercase J
75	113	4B	01001011	K	&#75;	 	Uppercase K
76	114	4C	01001100	L	&#76;	 	Uppercase L
77	115	4D	01001101	M	&#77;	 	Uppercase M
78	116	4E	01001110	N	&#78;	 	Uppercase N
79	117	4F	01001111	O	&#79;	 	Uppercase O
80	120	50	01010000	P	&#80;	 	Uppercase P
81	121	51	01010001	Q	&#81;	 	Uppercase Q
82	122	52	01010010	R	&#82;	 	Uppercase R
83	123	53	01010011	S	&#83;	 	Uppercase S
84	124	54	01010100	T	&#84;	 	Uppercase T
85	125	55	01010101	U	&#85;	 	Uppercase U
86	126	56	01010110	V	&#86;	 	Uppercase V
87	127	57	01010111	W	&#87;	 	Uppercase W
88	130	58	01011000	X	&#88;	 	Uppercase X
89	131	59	01011001	Y	&#89;	 	Uppercase Y
90	132	5A	01011010	Z	&#90;	 	Uppercase Z
91	133	5B	01011011	[	&#91;	 	Opening bracket
92	134	5C	01011100	\	&#92;	 	Backslash
93	135	5D	01011101	]	&#93;	 	Closing bracket
94	136	5E	01011110	^	&#94;	 	Caret - circumflex
95	137	5F	01011111	_	&#95;	 	Underscore
96	140	60	01100000	`	&#96;	 	Grave accent
97	141	61	01100001	a	&#97;	 	Lowercase a
98	142	62	01100010	b	&#98;	 	Lowercase b
99	143	63	01100011	c	&#99;	 	Lowercase c
100	144	64	01100100	d	&#100;	 	Lowercase d
101	145	65	01100101	e	&#101;	 	Lowercase e
102	146	66	01100110	f	&#102;	 	Lowercase f
103	147	67	01100111	g	&#103;	 	Lowercase g
104	150	68	01101000	h	&#104;	 	Lowercase h
105	151	69	01101001	i	&#105;	 	Lowercase i
106	152	6A	01101010	j	&#106;	 	Lowercase j
107	153	6B	01101011	k	&#107;	 	Lowercase k
108	154	6C	01101100	l	&#108;	 	Lowercase l
109	155	6D	01101101	m	&#109;	 	Lowercase m
110	156	6E	01101110	n	&#110;	 	Lowercase n
111	157	6F	01101111	o	&#111;	 	Lowercase o
112	160	70	01110000	p	&#112;	 	Lowercase p
113	161	71	01110001	q	&#113;	 	Lowercase q
114	162	72	01110010	r	&#114;	 	Lowercase r
115	163	73	01110011	s	&#115;	 	Lowercase s
116	164	74	01110100	t	&#116;	 	Lowercase t
117	165	75	01110101	u	&#117;	 	Lowercase u
118	166	76	01110110	v	&#118;	 	Lowercase v
119	167	77	01110111	w	&#119;	 	Lowercase w
120	170	78	01111000	x	&#120;	 	Lowercase x
121	171	79	01111001	y	&#121;	 	Lowercase y
122	172	7A	01111010	z	&#122;	 	Lowercase z
123	173	7B	01111011	{	&#123;	 	Opening brace
124	174	7C	01111100	|	&#124;	 	Vertical bar
125	175	7D	01111101	}	&#125;	 	Closing brace
126	176	7E	01111110	~	&#126;	 	Equivalency sign - tilde
127	177	7F	01111111		&#127;	 	Delete

The extended ASCII codes (character code 128-255)
There are several different variations of the 8-bit ASCII table. The table below is according to ISO 8859-1, also called ISO Latin-1. Codes 128-159 contain the Microsoft® Windows Latin-1 extended characters.
DEC	OCT	HEX	BIN	Symbol	HTML Number	HTML Name	Description
128	200	80	10000000	€	&#128;	&euro;	Euro sign
129	201	81	10000001	 	 	 	 
130	202	82	10000010	‚	&#130;	&sbquo;	Single low-9 quotation mark
131	203	83	10000011	ƒ	&#131;	&fnof;	Latin small letter f with hook
132	204	84	10000100	„	&#132;	&bdquo;	Double low-9 quotation mark
133	205	85	10000101	…	&#133;	&hellip;	Horizontal ellipsis
134	206	86	10000110	†	&#134;	&dagger;	Dagger
135	207	87	10000111	‡	&#135;	&Dagger;	Double dagger
136	210	88	10001000	ˆ	&#136;	&circ;	Modifier letter circumflex accent
137	211	89	10001001	‰	&#137;	&permil;	Per mille sign
138	212	8A	10001010	Š	&#138;	&Scaron;	Latin capital letter S with caron
139	213	8B	10001011	‹	&#139;	&lsaquo;	Single left-pointing angle quotation
140	214	8C	10001100	Œ	&#140;	&OElig;	Latin capital ligature OE
141	215	8D	10001101	 	 	 	 
142	216	8E	10001110	Ž	&#142;	 	Latin captial letter Z with caron
143	217	8F	10001111	 	 	 	 
144	220	90	10010000	 	 	 	 
145	221	91	10010001	‘	&#145;	&lsquo;	Left single quotation mark
146	222	92	10010010	’	&#146;	&rsquo;	Right single quotation mark
147	223	93	10010011	“	&#147;	&ldquo;	Left double quotation mark
148	224	94	10010100	”	&#148;	&rdquo;	Right double quotation mark
149	225	95	10010101	•	&#149;	&bull;	Bullet
150	226	96	10010110	–	&#150;	&ndash;	En dash
151	227	97	10010111	—	&#151;	&mdash;	Em dash
152	230	98	10011000	˜	&#152;	&tilde;	Small tilde
153	231	99	10011001	™	&#153;	&trade;	Trade mark sign
154	232	9A	10011010	š	&#154;	&scaron;	Latin small letter S with caron
155	233	9B	10011011	›	&#155;	&rsaquo;	Single right-pointing angle quotation mark
156	234	9C	10011100	œ	&#156;	&oelig;	Latin small ligature oe
157	235	9D	10011101	 	 	 	 
158	236	9E	10011110	ž	&#158;	 	Latin small letter z with caron
159	237	9F	10011111	Ÿ	&#159;	&Yuml;	Latin capital letter Y with diaeresis
160	240	A0	10100000	 	&#160;	&nbsp;	Non-breaking space
161	241	A1	10100001	¡	&#161;	&iexcl;	Inverted exclamation mark
162	242	A2	10100010	¢	&#162;	&cent;	Cent sign
163	243	A3	10100011	£	&#163;	&pound;	Pound sign
164	244	A4	10100100	¤	&#164;	&curren;	Currency sign
165	245	A5	10100101	¥	&#165;	&yen;	Yen sign
166	246	A6	10100110	¦	&#166;	&brvbar;	Pipe, Broken vertical bar
167	247	A7	10100111	§	&#167;	&sect;	Section sign
168	250	A8	10101000	¨	&#168;	&uml;	Spacing diaeresis - umlaut
169	251	A9	10101001	©	&#169;	&copy;	Copyright sign
170	252	AA	10101010	ª	&#170;	&ordf;	Feminine ordinal indicator
171	253	AB	10101011	«	&#171;	&laquo;	Left double angle quotes
172	254	AC	10101100	¬	&#172;	&not;	Not sign
173	255	AD	10101101		&#173;	&shy;	Soft hyphen
174	256	AE	10101110	®	&#174;	&reg;	Registered trade mark sign
175	257	AF	10101111	¯	&#175;	&macr;	Spacing macron - overline
176	260	B0	10110000	°	&#176;	&deg;	Degree sign
177	261	B1	10110001	±	&#177;	&plusmn;	Plus-or-minus sign
178	262	B2	10110010	²	&#178;	&sup2;	Superscript two - squared
179	263	B3	10110011	³	&#179;	&sup3;	Superscript three - cubed
180	264	B4	10110100	´	&#180;	&acute;	Acute accent - spacing acute
181	265	B5	10110101	µ	&#181;	&micro;	Micro sign
182	266	B6	10110110	¶	&#182;	&para;	Pilcrow sign - paragraph sign
183	267	B7	10110111	·	&#183;	&middot;	Middle dot - Georgian comma
184	270	B8	10111000	¸	&#184;	&cedil;	Spacing cedilla
185	271	B9	10111001	¹	&#185;	&sup1;	Superscript one
186	272	BA	10111010	º	&#186;	&ordm;	Masculine ordinal indicator
187	273	BB	10111011	»	&#187;	&raquo;	Right double angle quotes
188	274	BC	10111100	¼	&#188;	&frac14;	Fraction one quarter
189	275	BD	10111101	½	&#189;	&frac12;	Fraction one half
190	276	BE	10111110	¾	&#190;	&frac34;	Fraction three quarters
191	277	BF	10111111	¿	&#191;	&iquest;	Inverted question mark
192	300	C0	11000000	À	&#192;	&Agrave;	Latin capital letter A with grave
193	301	C1	11000001	Á	&#193;	&Aacute;	Latin capital letter A with acute
194	302	C2	11000010	Â	&#194;	&Acirc;	Latin capital letter A with circumflex
195	303	C3	11000011	Ã	&#195;	&Atilde;	Latin capital letter A with tilde
196	304	C4	11000100	Ä	&#196;	&Auml;	Latin capital letter A with diaeresis
197	305	C5	11000101	Å	&#197;	&Aring;	Latin capital letter A with ring above
198	306	C6	11000110	Æ	&#198;	&AElig;	Latin capital letter AE
199	307	C7	11000111	Ç	&#199;	&Ccedil;	Latin capital letter C with cedilla
200	310	C8	11001000	È	&#200;	&Egrave;	Latin capital letter E with grave
201	311	C9	11001001	É	&#201;	&Eacute;	Latin capital letter E with acute
202	312	CA	11001010	Ê	&#202;	&Ecirc;	Latin capital letter E with circumflex
203	313	CB	11001011	Ë	&#203;	&Euml;	Latin capital letter E with diaeresis
204	314	CC	11001100	Ì	&#204;	&Igrave;	Latin capital letter I with grave
205	315	CD	11001101	Í	&#205;	&Iacute;	Latin capital letter I with acute
206	316	CE	11001110	Î	&#206;	&Icirc;	Latin capital letter I with circumflex
207	317	CF	11001111	Ï	&#207;	&Iuml;	Latin capital letter I with diaeresis
208	320	D0	11010000	Ð	&#208;	&ETH;	Latin capital letter ETH
209	321	D1	11010001	Ñ	&#209;	&Ntilde;	Latin capital letter N with tilde
210	322	D2	11010010	Ò	&#210;	&Ograve;	Latin capital letter O with grave
211	323	D3	11010011	Ó	&#211;	&Oacute;	Latin capital letter O with acute
212	324	D4	11010100	Ô	&#212;	&Ocirc;	Latin capital letter O with circumflex
213	325	D5	11010101	Õ	&#213;	&Otilde;	Latin capital letter O with tilde
214	326	D6	11010110	Ö	&#214;	&Ouml;	Latin capital letter O with diaeresis
215	327	D7	11010111	×	&#215;	&times;	Multiplication sign
216	330	D8	11011000	Ø	&#216;	&Oslash;	Latin capital letter O with slash
217	331	D9	11011001	Ù	&#217;	&Ugrave;	Latin capital letter U with grave
218	332	DA	11011010	Ú	&#218;	&Uacute;	Latin capital letter U with acute
219	333	DB	11011011	Û	&#219;	&Ucirc;	Latin capital letter U with circumflex
220	334	DC	11011100	Ü	&#220;	&Uuml;	Latin capital letter U with diaeresis
221	335	DD	11011101	Ý	&#221;	&Yacute;	Latin capital letter Y with acute
222	336	DE	11011110	Þ	&#222;	&THORN;	Latin capital letter THORN
223	337	DF	11011111	ß	&#223;	&szlig;	Latin small letter sharp s - ess-zed
224	340	E0	11100000	à	&#224;	&agrave;	Latin small letter a with grave
225	341	E1	11100001	á	&#225;	&aacute;	Latin small letter a with acute
226	342	E2	11100010	â	&#226;	&acirc;	Latin small letter a with circumflex
227	343	E3	11100011	ã	&#227;	&atilde;	Latin small letter a with tilde
228	344	E4	11100100	ä	&#228;	&auml;	Latin small letter a with diaeresis
229	345	E5	11100101	å	&#229;	&aring;	Latin small letter a with ring above
230	346	E6	11100110	æ	&#230;	&aelig;	Latin small letter ae
231	347	E7	11100111	ç	&#231;	&ccedil;	Latin small letter c with cedilla
232	350	E8	11101000	è	&#232;	&egrave;	Latin small letter e with grave
233	351	E9	11101001	é	&#233;	&eacute;	Latin small letter e with acute
234	352	EA	11101010	ê	&#234;	&ecirc;	Latin small letter e with circumflex
235	353	EB	11101011	ë	&#235;	&euml;	Latin small letter e with diaeresis
236	354	EC	11101100	ì	&#236;	&igrave;	Latin small letter i with grave
237	355	ED	11101101	í	&#237;	&iacute;	Latin small letter i with acute
238	356	EE	11101110	î	&#238;	&icirc;	Latin small letter i with circumflex
239	357	EF	11101111	ï	&#239;	&iuml;	Latin small letter i with diaeresis
240	360	F0	11110000	ð	&#240;	&eth;	Latin small letter eth
241	361	F1	11110001	ñ	&#241;	&ntilde;	Latin small letter n with tilde
242	362	F2	11110010	ò	&#242;	&ograve;	Latin small letter o with grave
243	363	F3	11110011	ó	&#243;	&oacute;	Latin small letter o with acute
244	364	F4	11110100	ô	&#244;	&ocirc;	Latin small letter o with circumflex
245	365	F5	11110101	õ	&#245;	&otilde;	Latin small letter o with tilde
246	366	F6	11110110	ö	&#246;	&ouml;	Latin small letter o with diaeresis
247	367	F7	11110111	÷	&#247;	&divide;	Division sign
248	370	F8	11111000	ø	&#248;	&oslash;	Latin small letter o with slash
249	371	F9	11111001	ù	&#249;	&ugrave;	Latin small letter u with grave
250	372	FA	11111010	ú	&#250;	&uacute;	Latin small letter u with acute
251	373	FB	11111011	û	&#251;	&ucirc;	Latin small letter u with circumflex
252	374	FC	11111100	ü	&#252;	&uuml;	Latin small letter u with diaeresis
253	375	FD	11111101	ý	&#253;	&yacute;	Latin small letter y with acute
254	376	FE	11111110	þ	&#254;	&thorn;	Latin small letter thorn
255	377	FF	11111111	ÿ	&#255;	&yuml;	Latin small letter y with diaeresis

